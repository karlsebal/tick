#!/bin/bash

VERSION="0.2.1a"

shopt -s extglob
set -e

TICKDIR=$HOME/.tick

[ -d "$TICKDIR" ] || {
	mkdir -p "$TICKDIR"
}

[ -f $TICKDIR/config ] && {
	. $TICKDIR/config
} || {
	echo $TICKDIR/config not found
	exit -1
}

[ ${#OUTDIR} -eq 0 ] && {
	echo '$OUTDIR not configured'
	exit -1
}

[ ${#BINDIR} -eq 0 ] && {
	echo '$BINDIR not configured'
	exit -1
}

[ ${#WORKDAY_HOURS} -eq 0 ] && {
	echo '$WORKDAY_HOURS not configured'
	exit -1
}

[ ${#STATE} -eq 0 ] && {
	echo '$STATE not configured'
	exit -1
}

OUTFILE="$OUTDIR/protocol.csv"
PARSER="$BINDIR/parser.py"
HOLIDAYS="$BINDIR/holidays"


# check outdir existence
# create if none
[[ ! -d $OUTDIR ]] && {
	mkdir -vp "$OUTDIR" || exit -1
}

# check outfile existence
# create if none
[[ ! -f $OUTFILE ]] && {
	touch $OUTFILE || exit -1
}


# give a short usage
short_help () {
	echo "usage: ${0##*/} -hadmyDY [command] [comment]"
}

# give a detailed help
help() {
	short_help

	cat <<-EOF

		========
		options:
		========

		-h	help
		
		-d, --day       set day
		-m, --month     set month
		-y, --year      set year
		-D              set date
		-Y              set date to yesterday

		Note: -D option is dominant over -dmy. With -Y mixed last given wins.

		-a, --amamedis  set amamedis

		-V, --version   print version and exit


		=========
		commands:
		=========

		<HH[:MM]>                       duration
		<HH:MM>-<HH:MM>                 from-to	

		<[CC]YY/MM/DD>                  holiday
		<[CC]YY/MM/DD>-<[CC]YY/MM/DD>   holidays
        
        Note: XX/YY/ZZZZ will lead to funny results

		parse                           parse protocol
		state
		report
		sync                            sync protocol to backup location

		undo                            undo last entry
		redo                            redo last undo

		completion        install shell completion

EOF
}

# append entry to $OUTFILE
entry() {

	# feedback
	printf "\nfor "
	
	[[ $identifier == a ]] && {
		printf "amamedis "
	} || {
		printf "euratel "
	}

	printf "enter at date $date:\n"

	printf "$(bc <<< "scale=2; $duration/3600") hours "
	printf "($((duration/3600)):$((duration%3600/60)) or "
	printf "$((duration/60)) minutes) \n"
	printf "with ${from:-from}-${to:-to not set}"
	printf "${unix_from:+(}${unix_from:-}${unix_from:+-}${unix_to:-}${unix_to:+)} \n"
	printf "and comment: $comment \n"

	# entry
	echo $identifier,$(date -d "$date" +%Y,%m,%d),$duration,$unix_from,$unix_to,\"$comment\" >> $OUTFILE
}

# command line parsing

# if an option or bunch of options
# they are parsed into an array
# if option demands an argument 
# it’s read from $1 and $skip_next is increased
# shifts are done for option, bunch of options
# and parameter demanded by an option


# the stripped commandline
# we will append to this so
# the first entry will be 
# ${stripped[1]}
stripped=""

# number of arguments to be skipped
skip_next=0

# set identifier to Euratel
identifier=e

for arg in "$@"; do

	# skip arguments demanded by options
	# and already parsed
	[[ $skip_next -gt 0 ]] && {
		((skip_next--))
		continue
	}

	# shift for every command, option, bunch
	shift

	# options parsing
	# if we encount an option we will unset arg[0]
	# and move options to $arg[0+n]


	# do we have a bunch of options?
	[[ $arg =~ ^-[^-] ]] && {
		# parse letters into array…
		for i in $(seq 1 ${#arg}); do
			arg[$i]=${arg:$i:1}
		done
		# …and remove original
		unset arg[0]
	}

	# do we have a long option?
	[[ $arg =~ ^-- ]] && {
		# move the option to arg[1] and clean arg[0]
		arg[1]=$arg
		unset arg[0]
	}


	# now we have $arg clean which now contains
	# either a command or command parameter or null
	# $arg[@] needs cleanup to work properly which is
	# done in the loop handling it at last

	# this will parse the bunch-of-options as well
	# as single arguments where the loop is executed
	# only once. 
	# When an option occures demanding a second parameter
	# always $1 is used and skip_next is increased. 

	# for $arg[@] cleanup
	idx=1

	# only if $arg[0] is unset there are options to handle
	# short options are missing the leading dash since parsing to $arg
	# where long options kept their leading dashes
	[[ ! ${arg[0]} ]] && {
		for option in "${arg[@]}"; do
				case $option in

					--) echo -- stop reading arguments
						stripped=("${stripped[@]}" "$@")
						break 2
						;;

					h|\?|--help) help
						;;

					V|--version)
						echo $VERSION
						exit 0
						;;

					d|--day) 
						day=$1
						# be grateful with missing leading zero
						[[ ${#day} -eq 1 ]] && day=0$day
						shift
						((skip_next++))
						;;

					m|--month)
						month=$1
						# be grateful with missing leading zero
						[[ ${#month} -eq 1 ]] && month=0$month
						shift
						((skip_next++))
						;;

					y|--year)
						year=$1
						# be grateful with missing leading zero
						[[ ${#year} -eq 1 ]] && year=0$year
						shift
						((skip_next++))
						;;

					D|--date)
						date=$1
						shift
						((skip_next++))
						;;

					Y|--yesterday) 
						date=$(date -d 'yesterday' +%F)
						;;

					a|--amamedis) 
						identifier=a
						;;

					"") # ignore empty
						;;

					*) 
						echo unrecognized option: \"-$option\"
						exit -1
						;;

				esac
		# cleanup!
		unset arg[$((idx++))]
		done
	} || {
		# not an option or bunch.
		# store command or command parameter
		stripped=("${stripped[@]}" "$arg")
	}
done

# now after option parsing $stripped should contain only
# command and argument

# assemble date
# if date is set, other options -dmy are ignored.
if [[ $date ]]; then
	# sanitize
	date=$(date -d "$date" +%F)
else
	date=$(date -d "${year:-$(date +%y)}${month:-$(date +%m)}${day:-$(date +%d)}" +%F)
fi

# exit on error while setting date
[[ $? -ne 0 ]] && {
	echo error setting date
	exit -1
}


# we are done parsing the options and setting the date.
case ${stripped[1]} in

	# catch empty
	"") 
		help
		;; 

	# duration given
	*([0-9])*(:)*([0-9]))

		duration=${stripped[1]}

		[[ $duration =~ : ]] && {
			[[ ${duration:0:1} == : ]] && { 
				minutes=${duration:1}
				hours=0
			} || {
				hours=${duration%%:*}
				minutes=${duration##*:}
			}
		} || {
			hours=$duration
			minutes=0
		}

		duration=$((hours*3600+minutes*60))

		unset from
		unset to
		unset unix_from
		unset unix_to
		unset stripped[1]

		comment=${stripped[@]}

		entry
		;;

	# from-to given
	*([0-9])*(:)*([0-9])-*([0-9])*(:)*([0-9]))
		fromto=${stripped[1]}

		from=${fromto%%-*}
		[[ ! $from =~ : ]] && from="$from:00"

		to=${fromto##*-}
		[[ ! $to =~ : ]] && to="$to:00"

		unix_from=$(date -d "$from" +%s) || {
			echo error setting unix_from
			exit -1
		}

		unix_to=$(date -d "$to" +%s) || {
			echo error setting unix_to
			exit -1
		}

		# correct day transition
		[ $unix_to -lt $unix_from ] && {
			((unix_to+=86400))
		}

		duration=$((unix_to-unix_from))
		
		unset stripped[1]
		comment=${stripped[@]}

		entry
		;;
	
	# holiday given
	+([0-9])/+([0-9])/+([0-9]))
        
		# remove slashes
		day=${stripped[1]//\/}

        # sanitize date
        # prepend leading century if neccessary
		if [ ${#day} -eq 6 ]; then
            day=$(date +%C)$day
        elif [ ${#day} -ne 8 ]; then
			echo date should be 6 or 8 digits
			exit -1
        fi

		$HOLIDAYS $day $day $STATE h $WORKDAY_HOURS $OUTFILE
		;;
		
	# holidays given
	+([0-9])/+([0-9])/+([0-9])-+([0-9])/+([0-9])/+([0-9]))

        # remove slashes
        stripped[1]=${stripped[1]//\/}

        # get from and to
		from=${stripped[1]%-*}
		to=${stripped[1]#*-}

        # sanitize date
        # prepend leading century if neccessary
		if [ ${#from} -eq 6 ]; then
            from=$(date +%C)$from
        elif [ ${#from} -ne 8 ]; then
			echo date should be 6 or 8 digits
			exit -1
        fi

		if [ ${#to} -eq 6 ]; then
            to=$(date +%C)$to
        elif [ ${#to} -ne 8 ]; then
			echo date should be 6 or 8 digits
			exit -1
        fi

		$HOLIDAYS $from $to $STATE h $WORKDAY_HOURS $OUTFILE
		;;

	parse)
		$PARSER $OUTFILE
		;;

	report) 
		echo not implemented yet
		exit 1
		;;

	sync)
		echo not implemented yet
		exit 1
		;;
	
	state)
		echo not implemented yet
		exit 1
		;;

	undo)
		echo not implemented yet
		exit 1
		;;
	
	redo)
		echo not implemented yet
		exit 1
		;;
	
	completion)
		if [[ ${stripped[2]} == "install" ]]; then
			echo ". $BINDIR/tick_completion" >> ~/.bash_completion
			echo completion sourced in ~/.bash_completion
			exit
		elif [[ ${stripped[2]} == "remove" ]]; then
			# we gonna go until all is removed
			# in case of multiple installs
			set +e
			until [ $? -ne 0 ]; do
				ed -s ~/.bash_completion <<-EOF 
				/^\..*tick_completion$
				d
				w
				q
				EOF
			done
			set -e
			echo completion removed in ~/.bash_completion
			exit 
		elif [[ ! ${stripped[2]} ]]; then
			echo either \"remove\" or \"install\" is required
			exit 1
		else 
			echo ${stripped[2]} is unknown
			exit 1
		fi
		;;

	
	*) 
		echo command not found: ${stripped[@]}
		exit -1
		;;
esac

# vim: ai sw=4 sts=4 ts=4 noexpandtab
